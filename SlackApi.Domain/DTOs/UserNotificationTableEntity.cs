using SlackApi.Core.Extensions;
using SlackApi.Domain.TableStorage;

namespace SlackApi.Domain.DTOs
{
    public class UserNotificationTableEntity : TableEntityBase
    {
        public UserNotificationTableEntity()
        {

        }

        public UserNotificationTableEntity(string? teamId, string? userId, UserNotificationType userNotificationType) 
            : base(GeneratePartitionKey(teamId, userId), DateTime.UtcNow.ToEpochMillis().ToString("D16"))
        {
            if (string.IsNullOrWhiteSpace(teamId)
               || string.IsNullOrWhiteSpace(userId))
                throw new ArgumentNullException("One of the arguments is null or empty!");

            DateCreated = DateTime.UtcNow;
            TeamId = teamId;
            UserId = userId;
            UserNotificationTypeString = userNotificationType.ToString();
        }

        public static string GeneratePartitionKey(string? teamId, string? userId) => string.IsNullOrWhiteSpace(teamId)
            || string.IsNullOrWhiteSpace(userId)
            ? throw new ArgumentNullException("One of the arguments is null or empty!")
            : $"{teamId}_{userId}";

        public DateTime DateCreated { get; set; }
        public string? TeamId { get; set; }
        public string? Name { get; set; }
        public string? UserId { get; set; }

        public UserNotificationType UserNotificationType => string.IsNullOrWhiteSpace(UserNotificationTypeString)
            ? UserNotificationType.Default
            : (UserNotificationType)Enum
                .Parse(typeof(UserNotificationType), UserNotificationTypeString);
        public string? UserNotificationTypeString { get; set; }

        // Fields used when referring to notifications generated by other users
        public string? FromUserId { get; set; }
        public string? FromUserRealName { get; set; }

        // Fields used when referring to notifications generated for other users
        public string? ToUserId { get; set; }
        public string? ToUserRealName { get; set; }

        // Fields used for display in the home tab
        public string? Date => DateCreated.ToString("yyyy-MM-dd HH:mm");
        public string? Title { get; set; }
        public string? Body { get; set; }
        public string? ImageUrl { get; set; }
        public double? Amount { get; set; }
    }

    public enum UserNotificationType
    {
        Default,
        BadgeRecieved,
        BadgeSent
    }
}
